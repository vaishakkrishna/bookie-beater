# coding: utf-8

"""
    The Odds API

    To access the API, get a free API key from https://the-odds-api.com

    The version of the OpenAPI document: 4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.outcome import Outcome
from typing import Optional, Set
from typing_extensions import Self

class V4SportsSportOddsGet200ResponseInnerBookmakersInnerMarketsInner(BaseModel):
    """
    V4SportsSportOddsGet200ResponseInnerBookmakersInnerMarketsInner
    """ # noqa: E501
    key: Optional[StrictStr] = Field(default=None, description="The name of the odds market")
    last_update: Optional[datetime] = Field(default=None, description="A timestamp of when the markets's odds were last read. Will be an integer if dateFormat=unix, otherwise it will be a string. To check recency of odds, we recommend using this field instead of the \"last_update\" field at the bookmaker level.")
    outcomes: Optional[List[Outcome]] = None
    link: Optional[StrictStr] = Field(default=None, description="Link to the market on the bookmaker's website if applicable. This field is included when providing the query parameter includeLinks=true")
    sid: Optional[StrictStr] = Field(default=None, description="The bookmaker's id of the market if available. This field is included when providing the query parameter includeSids=true")
    __properties: ClassVar[List[str]] = ["key", "last_update", "outcomes", "link", "sid"]

    @field_validator('key')
    def key_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['h2h', 'spreads', 'totals', 'outrights']):
            raise ValueError("must be one of enum values ('h2h', 'spreads', 'totals', 'outrights')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V4SportsSportOddsGet200ResponseInnerBookmakersInnerMarketsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in outcomes (list)
        _items = []
        if self.outcomes:
            for _item_outcomes in self.outcomes:
                if _item_outcomes:
                    _items.append(_item_outcomes.to_dict())
            _dict['outcomes'] = _items
        # set to None if link (nullable) is None
        # and model_fields_set contains the field
        if self.link is None and "link" in self.model_fields_set:
            _dict['link'] = None

        # set to None if sid (nullable) is None
        # and model_fields_set contains the field
        if self.sid is None and "sid" in self.model_fields_set:
            _dict['sid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V4SportsSportOddsGet200ResponseInnerBookmakersInnerMarketsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": obj.get("key"),
            "last_update": obj.get("last_update"),
            "outcomes": [Outcome.from_dict(_item) for _item in obj["outcomes"]] if obj.get("outcomes") is not None else None,
            "link": obj.get("link"),
            "sid": obj.get("sid")
        })
        return _obj


