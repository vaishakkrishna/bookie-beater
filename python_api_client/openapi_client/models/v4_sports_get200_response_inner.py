# coding: utf-8

"""
    The Odds API

    To access the API, get a free API key from https://the-odds-api.com

    The version of the OpenAPI document: 4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V4SportsGet200ResponseInner(BaseModel):
    """
    V4SportsGet200ResponseInner
    """ # noqa: E501
    key: Optional[StrictStr] = Field(default=None, description="A unique slug for the sport. Use this as the \"sport\" param in /odds requests")
    active: Optional[StrictBool] = Field(default=None, description="Indicates if the sport is in season")
    group: Optional[StrictStr] = Field(default=None, description="A broader grouping")
    description: Optional[StrictStr] = Field(default=None, description="A brief description of the sport. Subject to change (for example, if sponsors change)")
    title: Optional[StrictStr] = Field(default=None, description="A presentable title of the sport. Occassionally this value can change, for example if a league undergoes a name change or change in sponsorship.")
    has_outrights: Optional[StrictBool] = Field(default=None, description="Indicates if the sport has outrights markets.")
    __properties: ClassVar[List[str]] = ["key", "active", "group", "description", "title", "has_outrights"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V4SportsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V4SportsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": obj.get("key"),
            "active": obj.get("active"),
            "group": obj.get("group"),
            "description": obj.get("description"),
            "title": obj.get("title"),
            "has_outrights": obj.get("has_outrights")
        })
        return _obj


