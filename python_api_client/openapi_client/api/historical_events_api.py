# coding: utf-8

"""
    The Odds API

    To access the API, get a free API key from https://the-odds-api.com

    The version of the OpenAPI document: 4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.v4_historical_sports_sport_events_event_id_odds_get200_response import V4HistoricalSportsSportEventsEventIdOddsGet200Response
from openapi_client.models.v4_historical_sports_sport_events_get200_response import V4HistoricalSportsSportEventsGet200Response
from openapi_client.models.v4_historical_sports_sport_odds_get200_response import V4HistoricalSportsSportOddsGet200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class HistoricalEventsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def v4_historical_sports_sport_events_event_id_odds_get(
        self,
        sport: Annotated[StrictStr, Field(description="sport key for which to return events and odds. This is obtained from the /sports endpoint")],
        event_id: Annotated[StrictStr, Field(description="Event ids can be found in the `id` field in the response of the historical events endpoint (see `/v4/historical/sports/{sports}/events`). If the event had expired at the specified timestamp (not receiving updates due to completion or cancellation), a HTTP 404 status code will be returned.")],
        api_key: Annotated[StrictStr, Field(description="Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access")],
        regions: Annotated[StrictStr, Field(description="Determines which bookmakers appear in the response. Multiple regions can be specified if comma delimited. Most use cases will only need to specify one region. See [the full list of bookmakers by region](https://the-odds-api.com/sports-odds-data/bookmaker-apis.html)")],
        var_date: Annotated[StrictStr, Field(description="The timestamp of the data snapshot to be returned, specified in ISO8601 format. The API will return the closest snapshot equal to or earlier than the provided date parameter")],
        markets: Annotated[Optional[StrictStr], Field(description="The odds markets to return. Multiple markets can be specified if comma delimited. Defaults to h2h (head to head / moneyline). Outrights only avaialable for select sports. See [the full list of supported market keys](https://the-odds-api.com/sports-odds-data/betting-markets.html)")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)")] = None,
        odds_format: Annotated[Optional[StrictStr], Field(description="Format of returned odds")] = None,
        bookmakers: Annotated[Optional[StrictStr], Field(description="Comma-separated list of bookmakers to be returned. If both `bookmakers` and `regions` are specified, `bookmakers` takes precendence. Bookmakers can be from any region. Every group of 10 bookmakers counts as 1 request. For example for a single market, specifying up to 10 bookmakers counts as 1 request. Specifying between 11 and 20 bookmakers counts as 2 requests")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> V4HistoricalSportsSportEventsEventIdOddsGet200Response:
        """v4_historical_sports_sport_events_event_id_odds_get

        Returns bookmaker odds for a single event as they appeared at the specified timestamp (date parameter). Accepts any available market keys using the `markets` parameter. Use this endpoint to access historical odds from any available markets for an event. For historical odds of the most popular featured markets, use the `/v4/historical/sports/{sport}/odds` endpoint. See the [full list of market keys here](https://the-odds-api.com/sports-odds-data/betting-markets.html)

        :param sport: sport key for which to return events and odds. This is obtained from the /sports endpoint (required)
        :type sport: str
        :param event_id: Event ids can be found in the `id` field in the response of the historical events endpoint (see `/v4/historical/sports/{sports}/events`). If the event had expired at the specified timestamp (not receiving updates due to completion or cancellation), a HTTP 404 status code will be returned. (required)
        :type event_id: str
        :param api_key: Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access (required)
        :type api_key: str
        :param regions: Determines which bookmakers appear in the response. Multiple regions can be specified if comma delimited. Most use cases will only need to specify one region. See [the full list of bookmakers by region](https://the-odds-api.com/sports-odds-data/bookmaker-apis.html) (required)
        :type regions: str
        :param var_date: The timestamp of the data snapshot to be returned, specified in ISO8601 format. The API will return the closest snapshot equal to or earlier than the provided date parameter (required)
        :type var_date: str
        :param markets: The odds markets to return. Multiple markets can be specified if comma delimited. Defaults to h2h (head to head / moneyline). Outrights only avaialable for select sports. See [the full list of supported market keys](https://the-odds-api.com/sports-odds-data/betting-markets.html)
        :type markets: str
        :param date_format: Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)
        :type date_format: str
        :param odds_format: Format of returned odds
        :type odds_format: str
        :param bookmakers: Comma-separated list of bookmakers to be returned. If both `bookmakers` and `regions` are specified, `bookmakers` takes precendence. Bookmakers can be from any region. Every group of 10 bookmakers counts as 1 request. For example for a single market, specifying up to 10 bookmakers counts as 1 request. Specifying between 11 and 20 bookmakers counts as 2 requests
        :type bookmakers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v4_historical_sports_sport_events_event_id_odds_get_serialize(
            sport=sport,
            event_id=event_id,
            api_key=api_key,
            regions=regions,
            var_date=var_date,
            markets=markets,
            date_format=date_format,
            odds_format=odds_format,
            bookmakers=bookmakers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V4HistoricalSportsSportEventsEventIdOddsGet200Response",
            '401': None,
            '404': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v4_historical_sports_sport_events_event_id_odds_get_with_http_info(
        self,
        sport: Annotated[StrictStr, Field(description="sport key for which to return events and odds. This is obtained from the /sports endpoint")],
        event_id: Annotated[StrictStr, Field(description="Event ids can be found in the `id` field in the response of the historical events endpoint (see `/v4/historical/sports/{sports}/events`). If the event had expired at the specified timestamp (not receiving updates due to completion or cancellation), a HTTP 404 status code will be returned.")],
        api_key: Annotated[StrictStr, Field(description="Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access")],
        regions: Annotated[StrictStr, Field(description="Determines which bookmakers appear in the response. Multiple regions can be specified if comma delimited. Most use cases will only need to specify one region. See [the full list of bookmakers by region](https://the-odds-api.com/sports-odds-data/bookmaker-apis.html)")],
        var_date: Annotated[StrictStr, Field(description="The timestamp of the data snapshot to be returned, specified in ISO8601 format. The API will return the closest snapshot equal to or earlier than the provided date parameter")],
        markets: Annotated[Optional[StrictStr], Field(description="The odds markets to return. Multiple markets can be specified if comma delimited. Defaults to h2h (head to head / moneyline). Outrights only avaialable for select sports. See [the full list of supported market keys](https://the-odds-api.com/sports-odds-data/betting-markets.html)")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)")] = None,
        odds_format: Annotated[Optional[StrictStr], Field(description="Format of returned odds")] = None,
        bookmakers: Annotated[Optional[StrictStr], Field(description="Comma-separated list of bookmakers to be returned. If both `bookmakers` and `regions` are specified, `bookmakers` takes precendence. Bookmakers can be from any region. Every group of 10 bookmakers counts as 1 request. For example for a single market, specifying up to 10 bookmakers counts as 1 request. Specifying between 11 and 20 bookmakers counts as 2 requests")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> ApiResponse[V4HistoricalSportsSportEventsEventIdOddsGet200Response]:
        """v4_historical_sports_sport_events_event_id_odds_get

        Returns bookmaker odds for a single event as they appeared at the specified timestamp (date parameter). Accepts any available market keys using the `markets` parameter. Use this endpoint to access historical odds from any available markets for an event. For historical odds of the most popular featured markets, use the `/v4/historical/sports/{sport}/odds` endpoint. See the [full list of market keys here](https://the-odds-api.com/sports-odds-data/betting-markets.html)

        :param sport: sport key for which to return events and odds. This is obtained from the /sports endpoint (required)
        :type sport: str
        :param event_id: Event ids can be found in the `id` field in the response of the historical events endpoint (see `/v4/historical/sports/{sports}/events`). If the event had expired at the specified timestamp (not receiving updates due to completion or cancellation), a HTTP 404 status code will be returned. (required)
        :type event_id: str
        :param api_key: Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access (required)
        :type api_key: str
        :param regions: Determines which bookmakers appear in the response. Multiple regions can be specified if comma delimited. Most use cases will only need to specify one region. See [the full list of bookmakers by region](https://the-odds-api.com/sports-odds-data/bookmaker-apis.html) (required)
        :type regions: str
        :param var_date: The timestamp of the data snapshot to be returned, specified in ISO8601 format. The API will return the closest snapshot equal to or earlier than the provided date parameter (required)
        :type var_date: str
        :param markets: The odds markets to return. Multiple markets can be specified if comma delimited. Defaults to h2h (head to head / moneyline). Outrights only avaialable for select sports. See [the full list of supported market keys](https://the-odds-api.com/sports-odds-data/betting-markets.html)
        :type markets: str
        :param date_format: Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)
        :type date_format: str
        :param odds_format: Format of returned odds
        :type odds_format: str
        :param bookmakers: Comma-separated list of bookmakers to be returned. If both `bookmakers` and `regions` are specified, `bookmakers` takes precendence. Bookmakers can be from any region. Every group of 10 bookmakers counts as 1 request. For example for a single market, specifying up to 10 bookmakers counts as 1 request. Specifying between 11 and 20 bookmakers counts as 2 requests
        :type bookmakers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v4_historical_sports_sport_events_event_id_odds_get_serialize(
            sport=sport,
            event_id=event_id,
            api_key=api_key,
            regions=regions,
            var_date=var_date,
            markets=markets,
            date_format=date_format,
            odds_format=odds_format,
            bookmakers=bookmakers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V4HistoricalSportsSportEventsEventIdOddsGet200Response",
            '401': None,
            '404': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v4_historical_sports_sport_events_event_id_odds_get_without_preload_content(
        self,
        sport: Annotated[StrictStr, Field(description="sport key for which to return events and odds. This is obtained from the /sports endpoint")],
        event_id: Annotated[StrictStr, Field(description="Event ids can be found in the `id` field in the response of the historical events endpoint (see `/v4/historical/sports/{sports}/events`). If the event had expired at the specified timestamp (not receiving updates due to completion or cancellation), a HTTP 404 status code will be returned.")],
        api_key: Annotated[StrictStr, Field(description="Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access")],
        regions: Annotated[StrictStr, Field(description="Determines which bookmakers appear in the response. Multiple regions can be specified if comma delimited. Most use cases will only need to specify one region. See [the full list of bookmakers by region](https://the-odds-api.com/sports-odds-data/bookmaker-apis.html)")],
        var_date: Annotated[StrictStr, Field(description="The timestamp of the data snapshot to be returned, specified in ISO8601 format. The API will return the closest snapshot equal to or earlier than the provided date parameter")],
        markets: Annotated[Optional[StrictStr], Field(description="The odds markets to return. Multiple markets can be specified if comma delimited. Defaults to h2h (head to head / moneyline). Outrights only avaialable for select sports. See [the full list of supported market keys](https://the-odds-api.com/sports-odds-data/betting-markets.html)")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)")] = None,
        odds_format: Annotated[Optional[StrictStr], Field(description="Format of returned odds")] = None,
        bookmakers: Annotated[Optional[StrictStr], Field(description="Comma-separated list of bookmakers to be returned. If both `bookmakers` and `regions` are specified, `bookmakers` takes precendence. Bookmakers can be from any region. Every group of 10 bookmakers counts as 1 request. For example for a single market, specifying up to 10 bookmakers counts as 1 request. Specifying between 11 and 20 bookmakers counts as 2 requests")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> RESTResponseType:
        """v4_historical_sports_sport_events_event_id_odds_get

        Returns bookmaker odds for a single event as they appeared at the specified timestamp (date parameter). Accepts any available market keys using the `markets` parameter. Use this endpoint to access historical odds from any available markets for an event. For historical odds of the most popular featured markets, use the `/v4/historical/sports/{sport}/odds` endpoint. See the [full list of market keys here](https://the-odds-api.com/sports-odds-data/betting-markets.html)

        :param sport: sport key for which to return events and odds. This is obtained from the /sports endpoint (required)
        :type sport: str
        :param event_id: Event ids can be found in the `id` field in the response of the historical events endpoint (see `/v4/historical/sports/{sports}/events`). If the event had expired at the specified timestamp (not receiving updates due to completion or cancellation), a HTTP 404 status code will be returned. (required)
        :type event_id: str
        :param api_key: Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access (required)
        :type api_key: str
        :param regions: Determines which bookmakers appear in the response. Multiple regions can be specified if comma delimited. Most use cases will only need to specify one region. See [the full list of bookmakers by region](https://the-odds-api.com/sports-odds-data/bookmaker-apis.html) (required)
        :type regions: str
        :param var_date: The timestamp of the data snapshot to be returned, specified in ISO8601 format. The API will return the closest snapshot equal to or earlier than the provided date parameter (required)
        :type var_date: str
        :param markets: The odds markets to return. Multiple markets can be specified if comma delimited. Defaults to h2h (head to head / moneyline). Outrights only avaialable for select sports. See [the full list of supported market keys](https://the-odds-api.com/sports-odds-data/betting-markets.html)
        :type markets: str
        :param date_format: Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)
        :type date_format: str
        :param odds_format: Format of returned odds
        :type odds_format: str
        :param bookmakers: Comma-separated list of bookmakers to be returned. If both `bookmakers` and `regions` are specified, `bookmakers` takes precendence. Bookmakers can be from any region. Every group of 10 bookmakers counts as 1 request. For example for a single market, specifying up to 10 bookmakers counts as 1 request. Specifying between 11 and 20 bookmakers counts as 2 requests
        :type bookmakers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v4_historical_sports_sport_events_event_id_odds_get_serialize(
            sport=sport,
            event_id=event_id,
            api_key=api_key,
            regions=regions,
            var_date=var_date,
            markets=markets,
            date_format=date_format,
            odds_format=odds_format,
            bookmakers=bookmakers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V4HistoricalSportsSportEventsEventIdOddsGet200Response",
            '401': None,
            '404': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v4_historical_sports_sport_events_event_id_odds_get_serialize(
        self,
        sport,
        event_id,
        api_key,
        regions,
        var_date,
        markets,
        date_format,
        odds_format,
        bookmakers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.the-odds-api.com'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if sport is not None:
            _path_params['sport'] = sport
        if event_id is not None:
            _path_params['eventId'] = event_id
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('apiKey', api_key))
            
        if regions is not None:
            
            _query_params.append(('regions', regions))
            
        if markets is not None:
            
            _query_params.append(('markets', markets))
            
        if date_format is not None:
            
            _query_params.append(('dateFormat', date_format))
            
        if odds_format is not None:
            
            _query_params.append(('oddsFormat', odds_format))
            
        if bookmakers is not None:
            
            _query_params.append(('bookmakers', bookmakers))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v4/historical/sports/{sport}/events/{eventId}/odds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v4_historical_sports_sport_events_get(
        self,
        sport: Annotated[StrictStr, Field(description="sport key for which to return events and odds. This is obtained from the /sports endpoint")],
        api_key: Annotated[StrictStr, Field(description="Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access")],
        var_date: Annotated[StrictStr, Field(description="The timestamp of the data snapshot to be returned, specified in ISO8601 format. The API will return the closest snapshot equal to or earlier than the provided date parameter")],
        date_format: Annotated[Optional[StrictStr], Field(description="Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)")] = None,
        event_ids: Annotated[Optional[StrictStr], Field(description="Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired")] = None,
        commence_time_from: Annotated[Optional[StrictStr], Field(description="Filters the response to show events that commence on and after this parameter. Values are in ISO8601 format")] = None,
        commence_time_to: Annotated[Optional[StrictStr], Field(description="Filters the response to show events that commence on and before this parameter. Values are in ISO8601 format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> V4HistoricalSportsSportEventsGet200Response:
        """v4_historical_sports_sport_events_get

        Returns a list of events for the specified sport as they appeared at the specified timestamp (date parameter). Odds are not included in the response

        :param sport: sport key for which to return events and odds. This is obtained from the /sports endpoint (required)
        :type sport: str
        :param api_key: Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access (required)
        :type api_key: str
        :param var_date: The timestamp of the data snapshot to be returned, specified in ISO8601 format. The API will return the closest snapshot equal to or earlier than the provided date parameter (required)
        :type var_date: str
        :param date_format: Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)
        :type date_format: str
        :param event_ids: Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired
        :type event_ids: str
        :param commence_time_from: Filters the response to show events that commence on and after this parameter. Values are in ISO8601 format
        :type commence_time_from: str
        :param commence_time_to: Filters the response to show events that commence on and before this parameter. Values are in ISO8601 format
        :type commence_time_to: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v4_historical_sports_sport_events_get_serialize(
            sport=sport,
            api_key=api_key,
            var_date=var_date,
            date_format=date_format,
            event_ids=event_ids,
            commence_time_from=commence_time_from,
            commence_time_to=commence_time_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V4HistoricalSportsSportEventsGet200Response",
            '401': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v4_historical_sports_sport_events_get_with_http_info(
        self,
        sport: Annotated[StrictStr, Field(description="sport key for which to return events and odds. This is obtained from the /sports endpoint")],
        api_key: Annotated[StrictStr, Field(description="Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access")],
        var_date: Annotated[StrictStr, Field(description="The timestamp of the data snapshot to be returned, specified in ISO8601 format. The API will return the closest snapshot equal to or earlier than the provided date parameter")],
        date_format: Annotated[Optional[StrictStr], Field(description="Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)")] = None,
        event_ids: Annotated[Optional[StrictStr], Field(description="Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired")] = None,
        commence_time_from: Annotated[Optional[StrictStr], Field(description="Filters the response to show events that commence on and after this parameter. Values are in ISO8601 format")] = None,
        commence_time_to: Annotated[Optional[StrictStr], Field(description="Filters the response to show events that commence on and before this parameter. Values are in ISO8601 format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> ApiResponse[V4HistoricalSportsSportEventsGet200Response]:
        """v4_historical_sports_sport_events_get

        Returns a list of events for the specified sport as they appeared at the specified timestamp (date parameter). Odds are not included in the response

        :param sport: sport key for which to return events and odds. This is obtained from the /sports endpoint (required)
        :type sport: str
        :param api_key: Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access (required)
        :type api_key: str
        :param var_date: The timestamp of the data snapshot to be returned, specified in ISO8601 format. The API will return the closest snapshot equal to or earlier than the provided date parameter (required)
        :type var_date: str
        :param date_format: Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)
        :type date_format: str
        :param event_ids: Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired
        :type event_ids: str
        :param commence_time_from: Filters the response to show events that commence on and after this parameter. Values are in ISO8601 format
        :type commence_time_from: str
        :param commence_time_to: Filters the response to show events that commence on and before this parameter. Values are in ISO8601 format
        :type commence_time_to: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v4_historical_sports_sport_events_get_serialize(
            sport=sport,
            api_key=api_key,
            var_date=var_date,
            date_format=date_format,
            event_ids=event_ids,
            commence_time_from=commence_time_from,
            commence_time_to=commence_time_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V4HistoricalSportsSportEventsGet200Response",
            '401': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v4_historical_sports_sport_events_get_without_preload_content(
        self,
        sport: Annotated[StrictStr, Field(description="sport key for which to return events and odds. This is obtained from the /sports endpoint")],
        api_key: Annotated[StrictStr, Field(description="Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access")],
        var_date: Annotated[StrictStr, Field(description="The timestamp of the data snapshot to be returned, specified in ISO8601 format. The API will return the closest snapshot equal to or earlier than the provided date parameter")],
        date_format: Annotated[Optional[StrictStr], Field(description="Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)")] = None,
        event_ids: Annotated[Optional[StrictStr], Field(description="Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired")] = None,
        commence_time_from: Annotated[Optional[StrictStr], Field(description="Filters the response to show events that commence on and after this parameter. Values are in ISO8601 format")] = None,
        commence_time_to: Annotated[Optional[StrictStr], Field(description="Filters the response to show events that commence on and before this parameter. Values are in ISO8601 format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> RESTResponseType:
        """v4_historical_sports_sport_events_get

        Returns a list of events for the specified sport as they appeared at the specified timestamp (date parameter). Odds are not included in the response

        :param sport: sport key for which to return events and odds. This is obtained from the /sports endpoint (required)
        :type sport: str
        :param api_key: Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access (required)
        :type api_key: str
        :param var_date: The timestamp of the data snapshot to be returned, specified in ISO8601 format. The API will return the closest snapshot equal to or earlier than the provided date parameter (required)
        :type var_date: str
        :param date_format: Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)
        :type date_format: str
        :param event_ids: Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired
        :type event_ids: str
        :param commence_time_from: Filters the response to show events that commence on and after this parameter. Values are in ISO8601 format
        :type commence_time_from: str
        :param commence_time_to: Filters the response to show events that commence on and before this parameter. Values are in ISO8601 format
        :type commence_time_to: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v4_historical_sports_sport_events_get_serialize(
            sport=sport,
            api_key=api_key,
            var_date=var_date,
            date_format=date_format,
            event_ids=event_ids,
            commence_time_from=commence_time_from,
            commence_time_to=commence_time_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V4HistoricalSportsSportEventsGet200Response",
            '401': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v4_historical_sports_sport_events_get_serialize(
        self,
        sport,
        api_key,
        var_date,
        date_format,
        event_ids,
        commence_time_from,
        commence_time_to,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.the-odds-api.com'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if sport is not None:
            _path_params['sport'] = sport
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('apiKey', api_key))
            
        if date_format is not None:
            
            _query_params.append(('dateFormat', date_format))
            
        if event_ids is not None:
            
            _query_params.append(('eventIds', event_ids))
            
        if commence_time_from is not None:
            
            _query_params.append(('commenceTimeFrom', commence_time_from))
            
        if commence_time_to is not None:
            
            _query_params.append(('commenceTimeTo', commence_time_to))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v4/historical/sports/{sport}/events',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v4_historical_sports_sport_odds_get(
        self,
        sport: Annotated[StrictStr, Field(description="sport key for which to return events and odds. This is obtained from the /sports endpoint")],
        api_key: Annotated[StrictStr, Field(description="Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access")],
        regions: Annotated[StrictStr, Field(description="Determines which bookmakers appear in the response. Multiple regions can be specified if comma delimited. Most use cases will only need to specify one region. For a list of bookmakers by region, see https://the-odds-api.com/sports-odds-data/bookmaker-apis.html")],
        var_date: Annotated[StrictStr, Field(description="The timestamp of the data snapshot to be returned, specified in ISO8601 format. The historical odds API will return the closest snapshot equal to or earlier than the provided date parameter")],
        markets: Annotated[Optional[StrictStr], Field(description="The odds market to return. Multiple markets can be specified if comma delimited. Defaults to h2h (head to head / moneyline). Outrights are only avaialable for select sports, such as golf.")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)")] = None,
        odds_format: Annotated[Optional[StrictStr], Field(description="Format of returned odds")] = None,
        event_ids: Annotated[Optional[StrictStr], Field(description="Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired")] = None,
        bookmakers: Annotated[Optional[StrictStr], Field(description="Comma-separated list of bookmakers to be returned. If both `bookmakers` and `regions` are specified, `bookmakers` takes precendence. Bookmakers can be from any region. Every group of 10 bookmakers counts as 1 request. For example for a single market, specifying up to 10 bookmakers counts as 1 request. Specifying between 11 and 20 bookmakers counts as 2 requests")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> V4HistoricalSportsSportOddsGet200Response:
        """v4_historical_sports_sport_odds_get

        Returns list of live and upcoming events at a point in time for a given sport, including bookmaker odds for the specified region and markets. This endpoint will only return featured markets (moneyline, match winner, 1x2, head-to-head, spreads, totals, over/under, outrights etc.), using the market keys `h2h`, `spreads`, `totals`. This endpoint was previously `/v4/sports/{sport}/odds-history`, which has been deprecated.

        :param sport: sport key for which to return events and odds. This is obtained from the /sports endpoint (required)
        :type sport: str
        :param api_key: Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access (required)
        :type api_key: str
        :param regions: Determines which bookmakers appear in the response. Multiple regions can be specified if comma delimited. Most use cases will only need to specify one region. For a list of bookmakers by region, see https://the-odds-api.com/sports-odds-data/bookmaker-apis.html (required)
        :type regions: str
        :param var_date: The timestamp of the data snapshot to be returned, specified in ISO8601 format. The historical odds API will return the closest snapshot equal to or earlier than the provided date parameter (required)
        :type var_date: str
        :param markets: The odds market to return. Multiple markets can be specified if comma delimited. Defaults to h2h (head to head / moneyline). Outrights are only avaialable for select sports, such as golf.
        :type markets: str
        :param date_format: Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)
        :type date_format: str
        :param odds_format: Format of returned odds
        :type odds_format: str
        :param event_ids: Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired
        :type event_ids: str
        :param bookmakers: Comma-separated list of bookmakers to be returned. If both `bookmakers` and `regions` are specified, `bookmakers` takes precendence. Bookmakers can be from any region. Every group of 10 bookmakers counts as 1 request. For example for a single market, specifying up to 10 bookmakers counts as 1 request. Specifying between 11 and 20 bookmakers counts as 2 requests
        :type bookmakers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v4_historical_sports_sport_odds_get_serialize(
            sport=sport,
            api_key=api_key,
            regions=regions,
            var_date=var_date,
            markets=markets,
            date_format=date_format,
            odds_format=odds_format,
            event_ids=event_ids,
            bookmakers=bookmakers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V4HistoricalSportsSportOddsGet200Response",
            '401': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v4_historical_sports_sport_odds_get_with_http_info(
        self,
        sport: Annotated[StrictStr, Field(description="sport key for which to return events and odds. This is obtained from the /sports endpoint")],
        api_key: Annotated[StrictStr, Field(description="Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access")],
        regions: Annotated[StrictStr, Field(description="Determines which bookmakers appear in the response. Multiple regions can be specified if comma delimited. Most use cases will only need to specify one region. For a list of bookmakers by region, see https://the-odds-api.com/sports-odds-data/bookmaker-apis.html")],
        var_date: Annotated[StrictStr, Field(description="The timestamp of the data snapshot to be returned, specified in ISO8601 format. The historical odds API will return the closest snapshot equal to or earlier than the provided date parameter")],
        markets: Annotated[Optional[StrictStr], Field(description="The odds market to return. Multiple markets can be specified if comma delimited. Defaults to h2h (head to head / moneyline). Outrights are only avaialable for select sports, such as golf.")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)")] = None,
        odds_format: Annotated[Optional[StrictStr], Field(description="Format of returned odds")] = None,
        event_ids: Annotated[Optional[StrictStr], Field(description="Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired")] = None,
        bookmakers: Annotated[Optional[StrictStr], Field(description="Comma-separated list of bookmakers to be returned. If both `bookmakers` and `regions` are specified, `bookmakers` takes precendence. Bookmakers can be from any region. Every group of 10 bookmakers counts as 1 request. For example for a single market, specifying up to 10 bookmakers counts as 1 request. Specifying between 11 and 20 bookmakers counts as 2 requests")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> ApiResponse[V4HistoricalSportsSportOddsGet200Response]:
        """v4_historical_sports_sport_odds_get

        Returns list of live and upcoming events at a point in time for a given sport, including bookmaker odds for the specified region and markets. This endpoint will only return featured markets (moneyline, match winner, 1x2, head-to-head, spreads, totals, over/under, outrights etc.), using the market keys `h2h`, `spreads`, `totals`. This endpoint was previously `/v4/sports/{sport}/odds-history`, which has been deprecated.

        :param sport: sport key for which to return events and odds. This is obtained from the /sports endpoint (required)
        :type sport: str
        :param api_key: Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access (required)
        :type api_key: str
        :param regions: Determines which bookmakers appear in the response. Multiple regions can be specified if comma delimited. Most use cases will only need to specify one region. For a list of bookmakers by region, see https://the-odds-api.com/sports-odds-data/bookmaker-apis.html (required)
        :type regions: str
        :param var_date: The timestamp of the data snapshot to be returned, specified in ISO8601 format. The historical odds API will return the closest snapshot equal to or earlier than the provided date parameter (required)
        :type var_date: str
        :param markets: The odds market to return. Multiple markets can be specified if comma delimited. Defaults to h2h (head to head / moneyline). Outrights are only avaialable for select sports, such as golf.
        :type markets: str
        :param date_format: Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)
        :type date_format: str
        :param odds_format: Format of returned odds
        :type odds_format: str
        :param event_ids: Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired
        :type event_ids: str
        :param bookmakers: Comma-separated list of bookmakers to be returned. If both `bookmakers` and `regions` are specified, `bookmakers` takes precendence. Bookmakers can be from any region. Every group of 10 bookmakers counts as 1 request. For example for a single market, specifying up to 10 bookmakers counts as 1 request. Specifying between 11 and 20 bookmakers counts as 2 requests
        :type bookmakers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v4_historical_sports_sport_odds_get_serialize(
            sport=sport,
            api_key=api_key,
            regions=regions,
            var_date=var_date,
            markets=markets,
            date_format=date_format,
            odds_format=odds_format,
            event_ids=event_ids,
            bookmakers=bookmakers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V4HistoricalSportsSportOddsGet200Response",
            '401': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v4_historical_sports_sport_odds_get_without_preload_content(
        self,
        sport: Annotated[StrictStr, Field(description="sport key for which to return events and odds. This is obtained from the /sports endpoint")],
        api_key: Annotated[StrictStr, Field(description="Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access")],
        regions: Annotated[StrictStr, Field(description="Determines which bookmakers appear in the response. Multiple regions can be specified if comma delimited. Most use cases will only need to specify one region. For a list of bookmakers by region, see https://the-odds-api.com/sports-odds-data/bookmaker-apis.html")],
        var_date: Annotated[StrictStr, Field(description="The timestamp of the data snapshot to be returned, specified in ISO8601 format. The historical odds API will return the closest snapshot equal to or earlier than the provided date parameter")],
        markets: Annotated[Optional[StrictStr], Field(description="The odds market to return. Multiple markets can be specified if comma delimited. Defaults to h2h (head to head / moneyline). Outrights are only avaialable for select sports, such as golf.")] = None,
        date_format: Annotated[Optional[StrictStr], Field(description="Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)")] = None,
        odds_format: Annotated[Optional[StrictStr], Field(description="Format of returned odds")] = None,
        event_ids: Annotated[Optional[StrictStr], Field(description="Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired")] = None,
        bookmakers: Annotated[Optional[StrictStr], Field(description="Comma-separated list of bookmakers to be returned. If both `bookmakers` and `regions` are specified, `bookmakers` takes precendence. Bookmakers can be from any region. Every group of 10 bookmakers counts as 1 request. For example for a single market, specifying up to 10 bookmakers counts as 1 request. Specifying between 11 and 20 bookmakers counts as 2 requests")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> RESTResponseType:
        """v4_historical_sports_sport_odds_get

        Returns list of live and upcoming events at a point in time for a given sport, including bookmaker odds for the specified region and markets. This endpoint will only return featured markets (moneyline, match winner, 1x2, head-to-head, spreads, totals, over/under, outrights etc.), using the market keys `h2h`, `spreads`, `totals`. This endpoint was previously `/v4/sports/{sport}/odds-history`, which has been deprecated.

        :param sport: sport key for which to return events and odds. This is obtained from the /sports endpoint (required)
        :type sport: str
        :param api_key: Access key (40 characters). Get an API key at https://the-odds-api.com/#get-access (required)
        :type api_key: str
        :param regions: Determines which bookmakers appear in the response. Multiple regions can be specified if comma delimited. Most use cases will only need to specify one region. For a list of bookmakers by region, see https://the-odds-api.com/sports-odds-data/bookmaker-apis.html (required)
        :type regions: str
        :param var_date: The timestamp of the data snapshot to be returned, specified in ISO8601 format. The historical odds API will return the closest snapshot equal to or earlier than the provided date parameter (required)
        :type var_date: str
        :param markets: The odds market to return. Multiple markets can be specified if comma delimited. Defaults to h2h (head to head / moneyline). Outrights are only avaialable for select sports, such as golf.
        :type markets: str
        :param date_format: Format of returned timestamps. Can be iso (ISO8601) or unix timestamp (seconds since epoch)
        :type date_format: str
        :param odds_format: Format of returned odds
        :type odds_format: str
        :param event_ids: Comma-separated event ids. Filters the response to only return events for the specified ids, provided those events have not expired
        :type event_ids: str
        :param bookmakers: Comma-separated list of bookmakers to be returned. If both `bookmakers` and `regions` are specified, `bookmakers` takes precendence. Bookmakers can be from any region. Every group of 10 bookmakers counts as 1 request. For example for a single market, specifying up to 10 bookmakers counts as 1 request. Specifying between 11 and 20 bookmakers counts as 2 requests
        :type bookmakers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v4_historical_sports_sport_odds_get_serialize(
            sport=sport,
            api_key=api_key,
            regions=regions,
            var_date=var_date,
            markets=markets,
            date_format=date_format,
            odds_format=odds_format,
            event_ids=event_ids,
            bookmakers=bookmakers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V4HistoricalSportsSportOddsGet200Response",
            '401': None,
            '422': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v4_historical_sports_sport_odds_get_serialize(
        self,
        sport,
        api_key,
        regions,
        var_date,
        markets,
        date_format,
        odds_format,
        event_ids,
        bookmakers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = [
            'https://api.the-odds-api.com'
        ]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if sport is not None:
            _path_params['sport'] = sport
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('apiKey', api_key))
            
        if regions is not None:
            
            _query_params.append(('regions', regions))
            
        if markets is not None:
            
            _query_params.append(('markets', markets))
            
        if date_format is not None:
            
            _query_params.append(('dateFormat', date_format))
            
        if odds_format is not None:
            
            _query_params.append(('oddsFormat', odds_format))
            
        if event_ids is not None:
            
            _query_params.append(('eventIds', event_ids))
            
        if bookmakers is not None:
            
            _query_params.append(('bookmakers', bookmakers))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v4/historical/sports/{sport}/odds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


